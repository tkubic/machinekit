# #######################################
#
# HAL file for BeagleBone + BeBoPr cape with 4 steppers
#
# Derived from example hm2-stepper config
#
# ########################################

# Launch the setup script to make sure hardware setup looks good
loadusr -w ./setup.sh

# start haltalk server
#loadusr -W haltalk

# ###################################
# Core EMC/HAL Loads
# ###################################

# kinematics
loadrt trivkins

# motion controller, get name and thread periods from ini file
# trajectory planner
loadrt tp
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[TRAJ]AXES num_aio=15 tp=tp kins=trivkins


# load low-level drivers
loadrt hal_bb_gpio output_pins=816,822,823,824,825,826,914,923,925 input_pins=807,808,809,810,817,911,913
loadrt [PRUCONF](DRIVER) prucode=$(HAL_RTMOD_DIR)/[PRUCONF](PRUBIN) [PRUCONF](CONFIG) halname=hpg
loadrt pid count=2
loadrt limit1 count=2
loadrt CoreXY


# Python user-mode HAL module to read ADC value and generate a thermostat output for PWM
# c = analog input channel and thermistor table
loadusr -Wn Therm hal_temp_bbb -n Therm -c 04:epcos_B57560G1104,05:epcos_B57560G1104 -b CRAMPS

#used for comparing temperature set value with actual for waiting on temperature
loadrt wcomp count=1
loadrt sum2 count=4


# ################################################
# THREADS
# ################################################

addf hpg.capture-position   		  servo-thread
addf bb_gpio.read                         servo-thread
addf CoreXY.0.read                        servo-thread
addf motion-command-handler               servo-thread
addf motion-controller                    servo-thread
addf pid.0.do-pid-calcs                   servo-thread
addf pid.1.do-pid-calcs                   servo-thread
addf limit1.0                             servo-thread
addf limit1.1                             servo-thread
addf CoreXY.0.write                       servo-thread
addf hpg.update             		  servo-thread
addf bb_gpio.write                        servo-thread

# ###################################
# UI remote component definition
# ###################################
sete 1 0.1

newcomp fdm-e0 timer=100
newpin  fdm-e0 fdm-e0.temp.meas      float in eps=1
newpin  fdm-e0 fdm-e0.temp.set       float io
newpin  fdm-e0 fdm-e0.temp.standby   float in
newpin  fdm-e0 fdm-e0.temp.limit.min float in
newpin  fdm-e0 fdm-e0.temp.limit.max float in
newpin  fdm-e0 fdm-e0.temp.in-range  bit   in
newpin  fdm-e0 fdm-e0.error          bit   in
newpin  fdm-e0 fdm-e0.active         bit   in
ready   fdm-e0

newcomp fdm-hbp timer=100
newpin  fdm-hbp fdm-hbp.temp.meas      float in eps=1
newpin  fdm-hbp fdm-hbp.temp.set       float io
newpin  fdm-hbp fdm-hbp.temp.standby   float in
newpin  fdm-hbp fdm-hbp.temp.limit.min float in
newpin  fdm-hbp fdm-hbp.temp.limit.max float in
newpin  fdm-hbp fdm-hbp.temp.in-range  bit   in
newpin  fdm-hbp fdm-hbp.error          bit   in
newpin  fdm-hbp fdm-hbp.active         bit   in
ready   fdm-hbp

newcomp fdm-f0 timer=100
newpin fdm-f0 fdm-f0.set float io
ready fdm-f0

newcomp fdm-f1 timer=100
newpin fdm-f1 fdm-f1.set float io
ready fdm-f1

#newcomp fdm-f2 timer=100
#newpin fdm-f2 fdm-f2.set float io
#ready fdm-f2

#newcomp fdm-f3 timer=100
#newpin fdm-f3 fdm-f3.set float io
#ready fdm-f3

newcomp fdm-l0 timer=100
newpin fdm-l0 fdm-l0.r float io
newpin fdm-l0 fdm-l0.g float io
newpin fdm-l0 fdm-l0.b float io
newpin fdm-l0 fdm-l0.w float io
ready  fdm-l0

newcomp fdm-ve-jog timer=100
newpin fdm-ve-jog fdm-ve-jog.distance       float io
newpin fdm-ve-jog fdm-ve-jog.velocity       float io
newpin fdm-ve-jog fdm-ve-jog.direction      bit   io
newpin fdm-ve-jog fdm-ve-jog.trigger        bit   io
newpin fdm-ve-jog fdm-ve-jog.continous      bit   out
newpin fdm-ve-jog fdm-ve-jog.dtg            float in
newpin fdm-ve-jog fdm-ve-jog.max-velocity   float in
ready  fdm-ve-jog

newcomp fdm-ve-params timer=100
newpin fdm-ve-params fdm-ve-params.filament-dia     float io
newpin fdm-ve-params fdm-ve-params.retract-vel      float io
newpin fdm-ve-params fdm-ve-params.retract-len      float io
newpin fdm-ve-params fdm-ve-params.extrude-scale    float io
newpin fdm-ve-params fdm-ve-params.accel-adj-gain   float io
ready  fdm-ve-params

#newcomp gantry-config timer=100
#newpin gantry-config gantry-config.offset-left  float io
#newpin gantry-config gantry-config.offset-right float io
#ready gantry-config
    
newcomp fdm-e0-pid timer=100
newpin fdm-e0-pid fdm-e0-pid.Pgain              float io
newpin fdm-e0-pid fdm-e0-pid.Igain              float io
newpin fdm-e0-pid fdm-e0-pid.Dgain              float io
newpin fdm-e0-pid fdm-e0-pid.maxerrorI          float io
newpin fdm-e0-pid fdm-e0-pid.bias               float io
newpin fdm-e0-pid fdm-e0-pid.max                float in
newpin fdm-e0-pid fdm-e0-pid.min                float in
newpin fdm-e0-pid fdm-e0-pid.command            float io
newpin fdm-e0-pid fdm-e0-pid.feedback           float in
newpin fdm-e0-pid fdm-e0-pid.output             float in
ready  fdm-e0-pid

# ######################################################
# Axis-of-motion Specific Configs (not the GUI)
# ######################################################

# ################
# CoreXY Setup
# ################
net corexy.X.pos-cmd <= axis.0.motor-pos-cmd
net corexy.X.pos-cmd => CoreXY.0.axis.0.pos-cmd
net corexy.Y.pos-cmd <= axis.1.motor-pos-cmd
net corexy.Y.pos-cmd => CoreXY.0.axis.1.pos-cmd

net corexy.X.pos-fb  <= CoreXY.0.axis.0.pos-fb
net corexy.X.pos-fb  => axis.0.motor-pos-fb
net corexy.Y.pos-fb  <= CoreXY.0.axis.1.pos-fb
net corexy.Y.pos-fb  => axis.1.motor-pos-fb

setp CoreXY.0.axis.0.gain 1
setp CoreXY.0.axis.1.gain 1


# ################
# X [0] Axis
# ################

# axis enable chain
newsig emcmot.00.enable bit
sets emcmot.00.enable FALSE

net emcmot.00.enable <= axis.0.amp-enable-out
net emcmot.00.enable => hpg.stepgen.00.enable


# position command and feedback
net emcmot.00.pos-cmd <= CoreXY.0.joint.0.pos-cmd
net emcmot.00.pos-cmd => hpg.stepgen.00.position-cmd

net motor.00.pos-fb <= hpg.stepgen.00.position-fb
net motor.00.pos-fb => CoreXY.0.joint.0.pos-fb


# timing parameters
setp hpg.stepgen.00.dirsetup        [AXIS_0]DIRSETUP
setp hpg.stepgen.00.dirhold         [AXIS_0]DIRHOLD

setp hpg.stepgen.00.steplen         [AXIS_0]STEPLEN
setp hpg.stepgen.00.stepspace       [AXIS_0]STEPSPACE

setp hpg.stepgen.00.position-scale  [AXIS_0]SCALE

setp hpg.stepgen.00.maxvel          [AXIS_0]STEPGEN_MAX_VEL
setp hpg.stepgen.00.maxaccel        [AXIS_0]STEPGEN_MAX_ACC

#setp hpg.stepgen.00.step_type       0
# P8.43 PRU1.out2
setp hpg.stepgen.00.steppin        813
# P8.44 PRU1.out4
setp hpg.stepgen.00.dirpin         812


# ################
# Y [1] Axis
# ################

# axis enable chain
newsig emcmot.01.enable bit
sets emcmot.01.enable FALSE

net emcmot.01.enable <= axis.1.amp-enable-out
net emcmot.01.enable => hpg.stepgen.01.enable


# position command and feedback
net emcmot.01.pos-cmd <= CoreXY.0.joint.1.pos-cmd
net emcmot.01.pos-cmd => hpg.stepgen.01.position-cmd

net motor.01.pos-fb <= hpg.stepgen.01.position-fb
net motor.01.pos-fb => CoreXY.0.joint.1.pos-fb


# timing parameters
setp hpg.stepgen.01.dirsetup        [AXIS_1]DIRSETUP
setp hpg.stepgen.01.dirhold         [AXIS_1]DIRHOLD

setp hpg.stepgen.01.steplen         [AXIS_1]STEPLEN
setp hpg.stepgen.01.stepspace       [AXIS_1]STEPSPACE

setp hpg.stepgen.01.position-scale  [AXIS_1]SCALE

setp hpg.stepgen.01.maxvel          [AXIS_1]STEPGEN_MAX_VEL
setp hpg.stepgen.01.maxaccel        [AXIS_1]STEPGEN_MAX_ACC

#setp hpg.stepgen.01.step_type       0
# P8.42 PRU1.out5
setp hpg.stepgen.01.steppin        815
# P8.39 PRU1.out6
setp hpg.stepgen.01.dirpin         814


# ################
# Z [2] Axis
# ################

# axis enable chain
newsig emcmot.02.enable bit
sets emcmot.02.enable FALSE

net emcmot.02.enable <= axis.2.amp-enable-out
net emcmot.02.enable => hpg.stepgen.02.enable


# position command and feedback
net emcmot.02.pos-cmd <= axis.2.motor-pos-cmd
net emcmot.02.pos-cmd => hpg.stepgen.02.position-cmd

net motor.02.pos-fb <= hpg.stepgen.02.position-fb
net motor.02.pos-fb => axis.2.motor-pos-fb


# timing parameters
setp hpg.stepgen.02.dirsetup        [AXIS_2]DIRSETUP
setp hpg.stepgen.02.dirhold         [AXIS_2]DIRHOLD

setp hpg.stepgen.02.steplen         [AXIS_2]STEPLEN
setp hpg.stepgen.02.stepspace       [AXIS_2]STEPSPACE

setp hpg.stepgen.02.position-scale  [AXIS_2]SCALE

setp hpg.stepgen.02.maxvel          [AXIS_2]STEPGEN_MAX_VEL
setp hpg.stepgen.02.maxaccel        [AXIS_2]STEPGEN_MAX_ACC

#setp hpg.stepgen.02.step_type       0
# P8.27 PRU1.out8
setp hpg.stepgen.02.steppin        819
# P8.29 PRU1.out9
setp hpg.stepgen.02.dirpin         818


# ################
# A [3] Axis (Extruder)
# ################

# axis enable chain
newsig emcmot.03.enable bit
sets emcmot.03.enable FALSE

net emcmot.03.enable <= axis.3.amp-enable-out
net emcmot.03.enable => hpg.stepgen.03.enable


# position command and feedback
net emcmot.03.pos-cmd <= axis.3.motor-pos-cmd
net emcmot.03.pos-cmd => hpg.stepgen.03.position-cmd

net motor.03.pos-fb <= hpg.stepgen.03.position-fb
net motor.03.pos-fb => axis.3.motor-pos-fb


# timing parameters
setp hpg.stepgen.03.dirsetup        [AXIS_3]DIRSETUP
setp hpg.stepgen.03.dirhold         [AXIS_3]DIRHOLD

setp hpg.stepgen.03.steplen         [AXIS_3]STEPLEN
setp hpg.stepgen.03.stepspace       [AXIS_3]STEPSPACE

setp hpg.stepgen.03.position-scale  [AXIS_3]SCALE

setp hpg.stepgen.03.maxvel          [AXIS_3]STEPGEN_MAX_VEL
setp hpg.stepgen.03.maxaccel        [AXIS_3]STEPGEN_MAX_ACC

#setp hpg.stepgen.03.step_type       0
# P8.30 GPIO2.25
setp hpg.stepgen.03.steppin        916
# P8.21 GPIO1.30
setp hpg.stepgen.03.dirpin         912


# ##################################################
# Standard I/O - EStop, Enables, Limit Switches, Etc
# ##################################################

# Create estop signal chain
# Drive software estop to hardware
net estop-out iocontrol.0.user-enable-out => bb_gpio.p8.out-26
setp bb_gpio.p8.out-26.invert 1

# Monitor estop input from hardware
net estop-loop bb_gpio.p8.in-17 => iocontrol.0.emc-enable-in
setp bb_gpio.p8.in-17.invert 1

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed

# Axis enable signal (active low)
net emcmot.00.enable => bb_gpio.p9.out-14
setp bb_gpio.p9.out-14.invert 0

# Machine power
# Use halui.machine.is-on instead?
net emcmot.00.enable => bb_gpio.p9.out-23

# Tie machine power signal to the CRAMPS LED
# Feel free to tie any other signal you like to the LED
net emcmot.00.enable => bb_gpio.p9.out-25

# ################
# Limit Switches
# ################
newsig limit-x-min bit
newsig limit-x-max bit
newsig limit-y-min bit
newsig limit-y-max bit
newsig limit-z-min bit
newsig limit-z-max bit

net limit-x-min <= bb_gpio.p8.in-08
net limit-x-max <= bb_gpio.p8.in-07
net limit-y-min <= bb_gpio.p8.in-10
net limit-y-max <= bb_gpio.p8.in-09
net limit-z-min <= bb_gpio.p9.in-13
net limit-z-max <= bb_gpio.p9.in-11

# Adjust as needed for your switch polarity
setp bb_gpio.p8.in-08.invert 1
setp bb_gpio.p8.in-07.invert 1
setp bb_gpio.p8.in-10.invert 1
setp bb_gpio.p8.in-09.invert 1
setp bb_gpio.p9.in-11.invert 1
setp bb_gpio.p9.in-13.invert 1

# Uncomment if you actually have limit switches setup
# You probably want to setup homing in the INI file, as well
net limit-x-min => axis.0.home-sw-in
#net limit-x-min => axis.0.neg-lim-sw-in
#net limit-x-max => axis.0.pos-lim-sw-in
net limit-y-max => axis.1.home-sw-in
#net limit-y-min => axis.1.neg-lim-sw-in
#net limit-y-max => axis.1.pos-lim-sw-in
net limit-z-min => axis.2.home-sw-in
#net limit-z-min => axis.2.neg-lim-sw-in
#net limit-z-max => axis.2.pos-lim-sw-in

# ################
# Servo signals
# ################

# There is currently no driver to generate pulses for actual
# radio-control style servos, but the buffered 5V output
# signals can be used as GPIO

# !!! WARNING !!!
# BBB on-board eMMC *MUST* be disabled in order to use these!
# Drive eMMC-disabled signal high to enable signals that overlap
# with the eMMC pins on P8, otherwise they are tri-stated
#
# You also need to edit the setup.sh file to enable the GPIO pins

# Signal the hardware that eMMC has been disabled and it is safe
# to drive the signals connected to eMMC lines (active low)
newsig eMMC-disabled bit
sets eMMC-disabled 0
net eMMC-disabled bb_gpio.p8.out-16
setp bb_gpio.p8.out-16.invert 1

# Servo signals, output only, driven by an 'ACT125

newsig servo.1 bit
newsig servo.2 bit
newsig servo.3 bit
newsig servo.4 bit

sets servo.1 0
sets servo.2 0
sets servo.3 0
sets servo.4 0

net servo.1 bb_gpio.p8.out-25
net servo.2 bb_gpio.p8.out-24
net servo.3 bb_gpio.p8.out-23
net servo.4 bb_gpio.p8.out-22


# ##################################################
# PWM and Temperature Signals
# ##################################################

# Define signals to use elsewhere (ie: M1xx codes)
# If you change any names here, lots of things will break!
newsig e0.temp.set   float
newsig e0.temp.meas  float
newsig bed.temp.set  float
newsig bed.temp.meas float


setp hpg.pwmgen.00.pwm_period       10000000

#signals for comparing set value and actual value of temperature
#newsig M209_set_temp             float
newsig sub_temp_min               float
newsig add_temp_max               float
newsig e0_temp_within_range       bit

#set boundaries with sum2 +1 and -1 of the wanted temperature
sets add_temp_max 1
sets sub_temp_min -1

net e0.temp.set  => sum2.0.in0
setp sum2.0.in1 2
#net add_temp_max.out => sum2.0.in1

net e0.temp.set  => sum2.1.in0
setp sum2.1.in1 -2
#net sub_temp_min.out => sum2.1.in1

#the values will be given to the wcomp.0 function
net minboundary sum2.1.out => wcomp.0.min
net maxboundary sum2.0.out => wcomp.0.max
net e0.temp.meas => wcomp.0.in

#the output of wcomp.0 will say if measured temperature is in range of set value
#this needs to be coupled to a digital input for M66 readout
#net e0_temp_within_range.in <= wcomp.0.out
#net e0_temp_within_range.out => motion.digital-in-00
net e0_temp_within_range wcomp.0.out => motion.digital-in-00

# Bed Heater FET 1
setp hpg.pwmgen.00.out.00.pin       811
setp hpg.pwmgen.00.out.00.enable    1
setp hpg.pwmgen.00.out.00.value     0.0

# E0 Heater FET 2
setp hpg.pwmgen.00.out.01.pin       915
setp hpg.pwmgen.00.out.01.enable    1
setp hpg.pwmgen.00.out.01.value     0.0

# E1 Heater FET 3
setp hpg.pwmgen.00.out.02.pin       941
setp hpg.pwmgen.00.out.02.enable    1
setp hpg.pwmgen.00.out.02.value     0.0

# E2 Heater FET 4
setp hpg.pwmgen.00.out.03.pin       921
setp hpg.pwmgen.00.out.03.enable    1
setp hpg.pwmgen.00.out.03.value     0.0

# FET 5 - Fan / LED
setp hpg.pwmgen.00.out.04.pin       927
setp hpg.pwmgen.00.out.04.enable    1
setp hpg.pwmgen.00.out.04.value     0.0
setp hpg.pwmgen.00.out.04.scale     255
#linking motion.analog-out-00 to fan speed.set.signal
net fan.1.speed.set <= motion.analog-out-12
net fan.1.speed.set => hpg.pwmgen.00.out.04.value
#net fan.1.value motion.analog-out-12 hpg.pwmgen.00.out.04.value

# FET 6 - Fan / LED
setp hpg.pwmgen.00.out.05.pin       922
setp hpg.pwmgen.00.out.05.enable    1
setp hpg.pwmgen.00.out.05.value     0.0
setp hpg.pwmgen.00.out.05.scale     255
#net hpg.pwmgen.00.out.05.value motion.analog-out-13
net fan.2.speed.set motion.analog-out-13 hpg.pwmgen.00.out.05.value

# PID for Extruder 0 temperature control
net e0.temp.meas    <= Therm.ch-04.value
net e0.temp.meas    => pid.0.feedback

sets e0.temp.set  0
net e0.temp.set     => pid.0.command motion.analog-out-02 

net e0.heater  <= pid.0.output
net e0.heater  => limit1.0.in
net e0.heaterl <= limit1.0.out
net e0.heaterl => hpg.pwmgen.00.out.01.value

# Limit heater PWM to positive values
# PWM mimics hm2 implementation, which generates output for negative values
setp limit1.0.min 0

# PID for Bed temperature control
net bed.temp.meas    <= Therm.ch-05.value
net bed.temp.meas    => pid.1.feedback

sets bed.temp.set  0
net bed.temp.set     => pid.1.command motion.analog-out-00

net bed.heater  <= pid.1.output
net bed.heater  => limit1.1.in
net bed.heaterl <= limit1.1.out
net bed.heaterl => hpg.pwmgen.00.out.00.value

# Limit heater PWM to positive values
# PWM mimics hm2 implementation, which generates output for negative values
setp limit1.1.min 0

# PID Parameters for adjusting temperature control
# Extruder
#setp pid.0.FF0      0
#setp pid.0.FF1      0
#setp pid.0.FF2      0
setp pid.0.Pgain  0.0324
setp pid.0.Igain  0.0112
setp pid.0.Dgain  0.0235
setp pid.0.maxerrorI 1.0
setp pid.0.bias    0.5
setp pid.0.enable   1

# Bed
#setp pid.1.FF0      0
#setp pid.1.FF1      0
#setp pid.1.FF2      0
setp pid.1.Pgain  1
setp pid.1.Igain  0.0
setp pid.1.Dgain  0.0
setp pid.1.maxerrorI 1.0
setp pid.1.bias    0.5
setp pid.1.enable   1

# ##################################################
# UI linking
# ##################################################

net bed.temp.meas       => fdm-hbp.temp.meas
#net hbp.temp.set       <=> fdm-hbp.temp.set
#net hbp.temp.standby    => fdm-hbp.temp.standby
#net hbp.temp.limit.min  => fdm-hbp.temp.limit.min
#net hbp.temp.limit.max  => fdm-hbp.temp.limit.max
#net hbp.temp.in-range   => fdm-hbp.temp.in-range
#net hbp.error           => fdm-hbp.error
#net hbp.active          => fdm-hbp.active
net e0.temp.meas        => fdm-e0.temp.meas
#net e0.temp.set        <=> fdm-e0.temp.set
net e0.temp.standby     => fdm-e0.temp.standby
net e0.temp.limit.min   => fdm-e0.temp.limit.min
net e0.temp.limit.max   => fdm-e0.temp.limit.max
net e0.temp.in-range    => fdm-e0.temp.in-range
net e0.error            => fdm-e0.error
net e0.active           => fdm-e0.active
net f0.set             <=> fdm-f0.set
net f1.set             <=> fdm-f1.set
#net f2.set             <=> fdm-f2.set
#net f3.set             <=> fdm-f3.set
#net l0.r               <=> fdm-l0.r
#net l0.g               <=> fdm-l0.g
#net l0.b               <=> fdm-l0.b
#net l0.w               <=> fdm-l0.w
net ve.jog-trigger     <=> fdm-ve-jog.trigger
net ve.jog-continous   <=  fdm-ve-jog.continous
net ve.jog-velocity    <=> fdm-ve-jog.velocity
net ve.jog-distance    <=> fdm-ve-jog.distance
net ve.jog-direction   <=> fdm-ve-jog.direction
net ve.jog-dtg          => fdm-ve-jog.dtg
setp fdm-ve-jog.max-velocity [AXIS_3]MAX_VELOCITY
net ve.filament-dia             <=> fdm-ve-params.filament-dia
net ve.retract-vel              <=> fdm-ve-params.retract-vel
net ve.retract-len              <=> fdm-ve-params.retract-len
net ve.extrude-scale            <=> fdm-ve-params.extrude-scale
net ve.extrude-accel-adj-gain   <=> fdm-ve-params.accel-adj-gain

#net home-offset-zr      <=> gantry-config.offset-right
#net home-offset-zl      <=> gantry-config.offset-left

# monitor the estop error sources
newg error-sources 100
#newm error-sources estop-user
#newm error-sources gpio-ok
#newm error-sources pwm-ok
#newm error-sources temp-ok
#newm error-sources e0.temp.in-limit
#newm error-sources e0.therm-ok
#newm error-sources hbp.temp.in-limit
#newm error-sources hbp.therm-ok



# start haltalk server after everything is initialized 
# else binding the remote components on the UI might fail
loadusr -W haltalk